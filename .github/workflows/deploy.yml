name: CI/CD Deploy1

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Устанавливаем sshpass для авторизации по паролю
      - name: Install sshpass
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y sshpass

      # 3. Синхронизируем файлы на удалённый сервер
      - name: Rsync to remote via password
        env:
          SSH_HOST:     ${{ secrets.SSH_HOST }}
          SSH_USER:     ${{ secrets.SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_PORT:     ${{ secrets.SSH_PORT }}
        run: |
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no \
            -P ${SSH_PORT:-22} ./* $SSH_USER@$SSH_HOST:/var/www/www-root/python-opc-api/

      # 4. Устанавливаем зависимости и запускаем скрипт на сервере
      - name: Install deps & run service via password
        env:
          SSH_HOST:     ${{ secrets.SSH_HOST }}
          SSH_USER:     ${{ secrets.SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_PORT:     ${{ secrets.SSH_PORT }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh \
            -o StrictHostKeyChecking=no \
            -p ${SSH_PORT:-22} \
            $SSH_USER@$SSH_HOST << 'EOF'
            set -e
            cd /var/www/www-root/python-opc-api

            # 1) Создаём или активируем виртуальное окружение
            python3 -m venv venv || true
            source venv/bin/activate

            # 2) Устанавливаем зависимости
            pip install --upgrade pip
            pip install -r requirements.txt

            # 3) Запускаем ваш сервис в фоне
            nohup python3 run_services.py > run_services.log 2>&1 &
          EOF