name: CI/CD Deploy1

on:
  push:
    branches: [ main ]

jobs:
  deploy_opc:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Устанавливаем sshpass для авторизации по паролю
      - name: Install sshpass
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y sshpass

      # 3. Синхронизируем файлы на удалённый сервер
      - name: Rsync to remote via password
        env:
          SSH_HOST:     ${{ secrets.SSH_HOST }}
          SSH_USER:     ${{ secrets.SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_PORT:     ${{ secrets.SSH_PORT }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" \
            "$SSH_USER@$SSH_HOST" "mkdir -p $TARGET_DIR"

    # Тарим всё, кроме gas_monitor, и сразу распаковываем на сервере
          tar --exclude='./gas_monitor' -czf - . | \
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" \
              "$SSH_USER@$SSH_HOST" "tar -xzf - -C $TARGET_DIR

      # 4. Устанавливаем зависимости и запускаем скрипт на сервере
      - name: Install deps & run service via password
        env:
          SSH_HOST:     ${{ secrets.SSH_HOST }}
          SSH_USER:     ${{ secrets.SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_PORT:     ${{ secrets.SSH_PORT }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh \
            -o StrictHostKeyChecking=no \
            -p ${SSH_PORT:-22} \
            $SSH_USER@$SSH_HOST << 'EOF'
            set -e
            cd /var/www/www-root/python-opc-api

            # 1) Создаём или активируем виртуальное окружение
            python3 -m venv venv || true
            source venv/bin/activate

            # 2) Устанавливаем зависимости
            pip install --upgrade pip
            pip install -r requirements.txt

            # 3) Запускаем ваш сервис в фоне
            nohup python3 run_services.py > run_services.log 2>&1 &
          EOF
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: gas_monitor

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python & Run tests
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    - run: |
        pip install -r requirements.txt
        python manage.py test

    # === Шаг 1: подготовка сервера ===
    - name: Server Setup
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          sudo apt-get update
          sudo apt-get install -y python3.12-venv python3-pip postgresql-client nginx git

          sudo mkdir -p /var/www/gas_monitor
          sudo chown $USER:$USER /var/www/gas_monitor

          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > /var/www/gas_monitor/.env

          cat << 'UNIT' | sudo tee /etc/systemd/system/gas_monitor.service
          [Unit]
          Description=Gas Monitor Django app
          After=network.target

          [Service]
          User=${{ secrets.SSH_USER }}
          WorkingDirectory=/var/www/gas_monitor
          EnvironmentFile=/var/www/gas_monitor/.env
          ExecStart=/var/www/gas_monitor/venv/bin/gunicorn --access-logfile - --workers 3 gas_monitor.wsgi:application

          [Install]
          WantedBy=multi-user.target
          UNIT

          sudo systemctl daemon-reload
          sudo systemctl enable gas_monitor

          cat << 'NGINX' | sudo tee /etc/nginx/sites-available/gas_monitor
          server {
              listen 80;
              server_name ai-bek.uz;

              location /static/ {
                  alias /var/www/gas_monitor/staticfiles/;
              }
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }
          }
          NGINX

          sudo ln -sf /etc/nginx/sites-available/gas_monitor /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx

          cat << 'DEPLOY' > /home/${{ secrets.SSH_USER }}/deploy.sh
          #!/usr/bin/env bash
          set -e
          cd /var/www/gas_monitor

          git fetch --all
          git reset --hard origin/main

          if [ ! -d venv ]; then
            python3.12 -m venv venv
          fi
          source venv/bin/activate
          pip install -r requirements.txt

          python manage.py migrate --noinput
          python manage.py collectstatic --noinput

          sudo systemctl restart gas_monitor
          DEPLOY

          chmod +x /home/${{ secrets.SSH_USER }}/deploy.sh
        EOF

    # === Шаг 2: копирование кода через scp ===
    - name: Copy code to server via scp
      run: |
        sudo apt-get install -y sshpass
        # Очищаем папку перед копированием
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "rm -rf /var/www/gas_monitor/*"
        # Копируем весь проект на сервер
        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -r ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/gas_monitor

    # === Шаг 3: запускаем deploy.sh на сервере ===
    - name: Trigger remote deploy script
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "/home/${{ secrets.SSH_USER }}/deploy.sh"